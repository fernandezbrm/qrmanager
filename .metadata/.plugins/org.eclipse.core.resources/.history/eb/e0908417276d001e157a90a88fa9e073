/**
 * 
 */
package qrmanager.dev;

import java.util.Random;
import gnu.io.CommPort;
import gnu.io.CommPortIdentifier;
import gnu.io.SerialPort;

import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;


/**
 * @author Roberto Fernandez
 *
 */
public class QRReaderSerialPort implements Runnable {
	private Thread thread;
	private String portName;
	private int speed;
	private QRReaderListener qrReadListener;

	QRReaderSerialPort(String portName, int speed, QRReaderListener qrReadListener){
		setPortName(portName);
		setSpeed(speed);
		setQrReadListener(qrReadListener);
		// Launch thread to read QRs from reader via serial port
		thread = new Thread(this);
		thread.start();
	}
	
	   void connect() throws Exception
	    {
	        CommPortIdentifier portIdentifier = CommPortIdentifier.getPortIdentifier(getPortName());
	        if ( portIdentifier.isCurrentlyOwned() )
	        {
	            System.out.println("Error: Port is currently in use");
	        }
	        else
	        {
	            CommPort commPort = portIdentifier.open(this.getClass().getName(),2000);
	            
	            if ( commPort instanceof SerialPort )
	            {
	                SerialPort serialPort = (SerialPort) commPort;
	                serialPort.setSerialPortParams(57600,SerialPort.DATABITS_8,SerialPort.STOPBITS_1,SerialPort.PARITY_NONE);
	                
	                InputStream in = serialPort.getInputStream();
	                OutputStream out = serialPort.getOutputStream();
	                
	                (new Thread(new SerialReader(in))).start();
	                (new Thread(new SerialWriter(out))).start();

	            }
	            else
	            {
	                System.out.println("Error: Only serial ports are handled by this example.");
	            }
	        }     
	    }	
	public void run() {
		// TODO Auto-generated method stub
		boolean exit = false;
		while (!exit) {
			try {
				Thread.sleep(new Random(0).nextInt(20000));
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			getQrReadListener().qrDataReceived("{id:" + Thread.currentThread().getName() + ", name:" + portName.toString() + "}");
			// System.out.println("QRReaderSerialPort " + portName + " thread awoke");
		}
	}
	public int getSpeed() {
		return speed;
	}
	public void setSpeed(int speed) {
		this.speed = speed;
	}
	public String getPortName() {
		return portName;
	}
	public void setPortName(String portName) {
		this.portName = portName;
	}
	
	public QRReaderListener getQrReadListener() {
		return qrReadListener;
	}
	
	public void setQrReadListener(QRReaderListener qrReadListener) {
		this.qrReadListener = qrReadListener;
	}
}
